# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Antony Polukhin 2014-2018.

#
# See https://svn.boost.org/trac/boost/wiki/TravisCoverals for description of this file
# and how it can be used with Boost libraries.

# ASan requires sudo
sudo: true

os:
    - linux

env:
    global:
        - BRANCH_TO_TEST=master
        - IGNORE_COVERAGE='*/boost-local/*'

    matrix:
        - CXXFLAGS="-fuse-ld=gold --coverage -fsanitize=address,leak,undefined" LDFLAGS="--coverage -lasan -lubsan" CC=gcc-7 CXX=g++-7 GCOV="--gcov-tool gcov-7" TOOLSET=gcc-7
        - CXXFLAGS="-fuse-ld=gold -fsanitize=thread" LDFLAGS="-ltsan" CC=gcc-7 CXX=g++-7 GCOV="--gcov-tool gcov-7" TOOLSET=gcc-7
        - CXXFLAGS="-Wno-c++11-narrowing --coverage -fsanitize=address,leak,undefined" LDFLAGS="--coverage -fsanitize=address,leak,undefined" CC=clang-6.0 CXX=clang++-6.0 TOOLSET=clang-6.0

###############################################################################################################
# From this point and below code is same for all the Boost libs
###############################################################################################################


# Installing additional tools
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - llvm-toolchain-trusty-6.0
    - git-core
    packages:
    - git
    - python-yaml
    - gcc-7
    - g++-7
    - clang-6.0
    - cmake
    - gdb
    - libc++-dev

before_install:
    # Set this to the name of the library
    - PROJECT_TO_TEST=`basename $TRAVIS_BUILD_DIR`
    - echo "Testing $PROJECT_TO_TEST"

    # Cloning Boost libraries (fast nondeep cloning)
    - PROJECT_DIR=`pwd`
    - BOOST=$HOME/boost-local
    - git init $BOOST
    - cd $BOOST
    - git remote add --no-tags -t $BRANCH_TO_TEST origin https://github.com/boostorg/boost.git
    - git fetch --depth=1
    - git checkout $BRANCH_TO_TEST
    - git submodule update --init --merge >/dev/null
    - git remote set-branches --add origin $BRANCH_TO_TEST
    - git pull --recurse-submodules
    - git submodule update --init >/dev/null
    - git checkout $BRANCH_TO_TEST
    - git submodule foreach "git reset --quiet --hard; git clean -fxd"
    - git reset --hard; git clean -fxd
    - git status
    - ./bootstrap.sh
    - ./b2 headers
    - ./b2 -j4 toolset=$TOOLSET address-model=64 architecture=x86 link=shared --with-program_options --with-filesystem --with-system --with-test --with-atomic --with-thread --with-timer --with-chrono --with-regex --with-random --with-graph stage
    - cd $PROJECT_DIR

script:
    - cmake -DCMAKE_BUILD_TYPE=Debug -DBOOST_ROOT=$BOOST .
    - make -j4
    - LSAN_OPTIONS=verbosity=1:log_threads=1 LD_LIBRARY_PATH=$BOOST/stage/lib:$LD_LIBRARY_PATH ./dmn_tests


after_success:
    - mkdir -p $TRAVIS_BUILD_DIR/coverals
    - wget https://github.com/linux-test-project/lcov/archive/v1.13.zip
    - unzip v1.13.zip
    - LCOV="`pwd`/lcov-1.13/bin/lcov $GCOV"

    - find ./src -type d -exec $LCOV --directory "{}" --base-directory ./"{}" --capture --output-file "{}"/tmp_coverage.info \;

    - find ./ -name tmp_coverage.info -print0 | xargs -0 -I {} $LCOV --remove "{}" "/usr*" $IGNORE_COVERAGE -o "{}"_1    
    - find ./ -name tmp_coverage.info_1 -print0 | xargs -0 -I {} sh -c "($LCOV -a $TRAVIS_BUILD_DIR/coverals/coverage.info -a '{}' --output-file $TRAVIS_BUILD_DIR/coverals/new_coverage.info && mv -f $TRAVIS_BUILD_DIR/coverals/new_coverage.info $TRAVIS_BUILD_DIR/coverals/coverage.info)|| :"

    # Sending data to Coveralls
    - cd $TRAVIS_BUILD_DIR
    - gem install coveralls-lcov
    - coveralls-lcov coverals/coverage.info
    # Sending data to codecov.io
    - bash <(curl -s https://codecov.io/bash)
